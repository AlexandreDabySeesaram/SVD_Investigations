{
  "hash": "b89b0d09e065caa4884d9a3844a412e5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: SVD\nformat:\n  html:\n    code-fold: true\n    page-layout: full\n---\n\n\n\n\n\n# Import libraries\nStart by importing pytorch & matplotlib. I could not make the latex interpreter work in binder, so the corresponding lines are commented out. \n\n::: {#4d4db5ab .cell execution_count=1}\n``` {.python .cell-code}\nimport torch \nimport torch.nn as nn\nimport matplotlib.pyplot as plt\nplt.rcParams['svg.fonttype'] = 'none'\nfrom IPython.display import set_matplotlib_formats\nimport matplotlib\nimport numpy as np\n#%% matplotlib setup\nmatplotlib.rcParams[\"text.usetex\"] = True\nmatplotlib.rcParams[\"font.family\"] = \"serif\"\nmatplotlib.rcParams[\"font.size\"] = \"14\"\nmps_device = torch.device(\"mps\")\n```\n:::\n\n\n# Create the functions\n\nThe separability proprieties of several functions are investigated. This code first shows the separability proprieties of different ways of clustering the 1D space into two regions. \nTwo types of functions are used to do so:\n* A sharp step function (Heaviside),\n* A smooth one (Tanh).\n\nIn both cases the position of the jump is parametrised by a scalar parameter $\\alpha$. \n\nFurhter investigations are conducted on moving front(s) with a \n* A gaussian function that is moving \n* Two gaussian functions moving at different rates\n\n::: {#9e95e375 .cell execution_count=2}\n``` {.python .cell-code}\nL = 10                                      # Space domain\nAlpha_vect = torch.linspace(0,1,100)        # vector of alphas\nx_vect = torch.linspace(0,L,2000)           # vector of x\n\n\nFunction = 'Heaviside'                      # Alpha-parameterised step function\nFunction = 'Tanh'                           # smooth alpha-parameterised step function\n# Function = 'Gauss'                        # Alpha-parameterised front function\n# Function = 'Gauss_sum'                      # Double alpha-parameterised front functions\n\n\n\n\nif Function == 'Heaviside':\n    F = torch.heaviside((x_vect[:,None] - (1-Alpha_vect[None,:])*L), x_vect[-1]/x_vect[-1])\nelif Function == 'Tanh':\n    F = torch.tanh((x_vect[:,None] - (1-Alpha_vect[None,:])*L))\nelif Function == 'Gauss':\n    F = torch.exp(-(x_vect[:,None] - (1-Alpha_vect[None,:])*L)**2)\n\nelif Function == 'Gauss_sum':\n    F = torch.exp(-(x_vect[:,None] - (1-Alpha_vect[None,:])*L)**2) + torch.exp(-(x_vect[:,None] - (1-2*Alpha_vect[None,:])*L)**2) \n\n```\n:::\n\n\n# Define the autoencoder\n\n::: {#992b61a5 .cell execution_count=3}\n``` {.python .cell-code}\nclass AutoEncoder(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.N_0 = 2000\n        self.N_1 = 1000\n        self.N_2 = 200\n        self.N_3 = 1\n        self.encoder = nn.Sequential(\n        nn.Linear(self.N_0,self.N_1),\n        nn.Tanh(),\n        nn.Linear(self.N_1, self.N_2),\n        nn.Tanh(),\n        nn.Linear(self.N_2, self.N_3)\n        )\n\n        self.decoder = nn.Sequential(\n        nn.Linear(self.N_3,self.N_2),\n        nn.ReLU(),\n        nn.Linear(self.N_2, self.N_1),\n        nn.ReLU(),\n        nn.Linear(self.N_1, self.N_0)\n        )\n    \n    def forward(self, x, role = \"decode\"):\n        if self.training:\n            e = self.encoder(x)\n            d = self.decoder(e)\n            return d\n        else:\n            match role:\n                case \"encode\":\n                    e = self.encoder(x)\n                    return e\n                case \"decode\":\n                    d = self.decoder(x)\n                    return d\n\nROM = AutoEncoder()\nMSE = nn.MSELoss()\n\noptimizer = torch.optim.Adam(ROM.parameters(),\n                             lr = 1e-3)\n```\n:::\n\n\n# Compute its SVD\n\n::: {#4c8f61f0 .cell execution_count=4}\n``` {.python .cell-code}\nU, S, V = torch.svd(F)\n```\n:::\n\n\n# Create validation and training sets\n\n::: {#a840c8f9 .cell execution_count=5}\n``` {.python .cell-code}\nn_epochs = 400\nimport random\nval = int(np.floor(0.2*F.shape[1]))\nF_train = F\nfor n in range(val):\n    r = random.randint(1, F_train.shape[1]-1)\n    F_val = F_train[:,r]\n    F_train = torch.cat([F_train[:, :r], F_train[:, r+1:]], dim=1)\n\nF_train = F_train.T\nF_val = F_val.T\n\nloss_t_vect = []\nloss_v_vect = []\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/vt/tk0pvn6x7dj443pvlvkxzcj00000gn/T/ipykernel_54620/3940643703.py:11: UserWarning:\n\nThe use of `x.T` on tensors of dimension other than 2 to reverse their shape is deprecated and it will throw an error in a future release. Consider `x.mT` to transpose batches of matrices or `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse the dimensions of a tensor. (Triggered internally at /private/var/folders/k1/30mswbxs7r1g6zwn8y4fyt500000gp/T/abs_5ae0635zuj/croot/pytorch-select_1700511177724/work/aten/src/ATen/native/TensorShape.cpp:3618.)\n\n```\n:::\n:::\n\n\n# Train the model\n\n::: {#76c5b1d2 .cell execution_count=6}\n``` {.python .cell-code}\nROM.train()\nF_train = F_train.to(mps_device)\nF_val = F_val.to(mps_device)\nROM.to(mps_device)\nfor epochs in range(n_epochs):\n    loss = MSE(ROM(F_train),F_train)\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n    loss_t_vect.append(loss.data)\n    loss_v_vect.append(MSE(ROM(F_val),F_val).data)\n    print(f'epoch {epochs+1} loss = {np.format_float_scientific(loss.item(), precision=4)}')\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepoch 1 loss = 8.2944e-01\nepoch 2 loss = 7.5798e-01\nepoch 3 loss = 6.3799e-01\nepoch 4 loss = 4.9959e-01\nepoch 5 loss = 5.0838e-01\nepoch 6 loss = 4.1978e-01\nepoch 7 loss = 3.4078e-01\nepoch 8 loss = 2.9239e-01\nepoch 9 loss = 2.705e-01\nepoch 10 loss = 2.3613e-01\nepoch 11 loss = 2.2331e-01\nepoch 12 loss = 2.1857e-01\nepoch 13 loss = 2.0125e-01\nepoch 14 loss = 1.8893e-01\nepoch 15 loss = 1.8219e-01\nepoch 16 loss = 1.7273e-01\nepoch 17 loss = 1.6577e-01\nepoch 18 loss = 1.5275e-01\nepoch 19 loss = 1.4004e-01\nepoch 20 loss = 1.2929e-01\nepoch 21 loss = 1.1696e-01\nepoch 22 loss = 1.0844e-01\nepoch 23 loss = 9.6580e-02\nepoch 24 loss = 8.7991e-02\nepoch 25 loss = 7.8110e-02\nepoch 26 loss = 7.1964e-02\nepoch 27 loss = 6.4922e-02\nepoch 28 loss = 5.9533e-02\nepoch 29 loss = 5.6388e-02\nepoch 30 loss = 5.2396e-02\nepoch 31 loss = 5.1201e-02\nepoch 32 loss = 4.8932e-02\nepoch 33 loss = 4.7881e-02\nepoch 34 loss = 4.6924e-02\nepoch 35 loss = 4.4342e-02\nepoch 36 loss = 4.3338e-02\nepoch 37 loss = 4.1383e-02\nepoch 38 loss = 3.9746e-02\nepoch 39 loss = 3.8144e-02\nepoch 40 loss = 3.6449e-02\nepoch 41 loss = 3.5492e-02\nepoch 42 loss = 3.3925e-02\nepoch 43 loss = 3.3328e-02\nepoch 44 loss = 3.2309e-02\nepoch 45 loss = 3.1344e-02\nepoch 46 loss = 3.0498e-02\nepoch 47 loss = 2.9197e-02\nepoch 48 loss = 2.801e-02\nepoch 49 loss = 2.6571e-02\nepoch 50 loss = 2.5309e-02\nepoch 51 loss = 2.3822e-02\nepoch 52 loss = 2.2759e-02\nepoch 53 loss = 2.1483e-02\nepoch 54 loss = 2.0369e-02\nepoch 55 loss = 1.9345e-02\nepoch 56 loss = 1.8319e-02\nepoch 57 loss = 1.7393e-02\nepoch 58 loss = 1.6523e-02\nepoch 59 loss = 1.5812e-02\nepoch 60 loss = 1.508e-02\nepoch 61 loss = 1.4572e-02\nepoch 62 loss = 1.4023e-02\nepoch 63 loss = 1.3626e-02\nepoch 64 loss = 1.3265e-02\nepoch 65 loss = 1.2937e-02\nepoch 66 loss = 1.2682e-02\nepoch 67 loss = 1.2435e-02\nepoch 68 loss = 1.2221e-02\nepoch 69 loss = 1.1977e-02\nepoch 70 loss = 1.1756e-02\nepoch 71 loss = 1.1494e-02\nepoch 72 loss = 1.1243e-02\nepoch 73 loss = 1.0973e-02\nepoch 74 loss = 1.0672e-02\nepoch 75 loss = 1.0403e-02\nepoch 76 loss = 1.0104e-02\nepoch 77 loss = 9.8175e-03\nepoch 78 loss = 9.5360e-03\nepoch 79 loss = 9.2437e-03\nepoch 80 loss = 8.9836e-03\nepoch 81 loss = 8.7239e-03\nepoch 82 loss = 8.4825e-03\nepoch 83 loss = 8.2727e-03\nepoch 84 loss = 8.0901e-03\nepoch 85 loss = 7.9712e-03\nepoch 86 loss = 7.9505e-03\nepoch 87 loss = 8.0319e-03\nepoch 88 loss = 8.3218e-03\nepoch 89 loss = 8.3230e-03\nepoch 90 loss = 7.9153e-03\nepoch 91 loss = 6.9526e-03\nepoch 92 loss = 6.5391e-03\nepoch 93 loss = 6.8117e-03\nepoch 94 loss = 6.7551e-03\nepoch 95 loss = 6.2106e-03\nepoch 96 loss = 5.9764e-03\nepoch 97 loss = 6.1215e-03\nepoch 98 loss = 5.9437e-03\nepoch 99 loss = 5.5773e-03\nepoch 100 loss = 5.5748e-03\nepoch 101 loss = 5.5966e-03\nepoch 102 loss = 5.3110e-03\nepoch 103 loss = 5.1749e-03\nepoch 104 loss = 5.2273e-03\nepoch 105 loss = 5.0741e-03\nepoch 106 loss = 4.8815e-03\nepoch 107 loss = 4.8850e-03\nepoch 108 loss = 4.8322e-03\nepoch 109 loss = 4.6573e-03\nepoch 110 loss = 4.5845e-03\nepoch 111 loss = 4.5733e-03\nepoch 112 loss = 4.456e-03\nepoch 113 loss = 4.334e-03\nepoch 114 loss = 4.3025e-03\nepoch 115 loss = 4.2466e-03\nepoch 116 loss = 4.1239e-03\nepoch 117 loss = 4.0446e-03\nepoch 118 loss = 4.0064e-03\nepoch 119 loss = 3.9255e-03\nepoch 120 loss = 3.8233e-03\nepoch 121 loss = 3.7626e-03\nepoch 122 loss = 3.7136e-03\nepoch 123 loss = 3.6319e-03\nepoch 124 loss = 3.5471e-03\nepoch 125 loss = 3.4916e-03\nepoch 126 loss = 3.4386e-03\nepoch 127 loss = 3.3638e-03\nepoch 128 loss = 3.2891e-03\nepoch 129 loss = 3.2333e-03\nepoch 130 loss = 3.1816e-03\nepoch 131 loss = 3.1165e-03\nepoch 132 loss = 3.0479e-03\nepoch 133 loss = 2.9904e-03\nepoch 134 loss = 2.9407e-03\nepoch 135 loss = 2.8869e-03\nepoch 136 loss = 2.8272e-03\nepoch 137 loss = 2.7705e-03\nepoch 138 loss = 2.7208e-03\nepoch 139 loss = 2.6739e-03\nepoch 140 loss = 2.6243e-03\nepoch 141 loss = 2.5727e-03\nepoch 142 loss = 2.5228e-03\nepoch 143 loss = 2.4777e-03\nepoch 144 loss = 2.4355e-03\nepoch 145 loss = 2.3936e-03\nepoch 146 loss = 2.3505e-03\nepoch 147 loss = 2.3074e-03\nepoch 148 loss = 2.2661e-03\nepoch 149 loss = 2.2272e-03\nepoch 150 loss = 2.1904e-03\nepoch 151 loss = 2.1547e-03\nepoch 152 loss = 2.1196e-03\nepoch 153 loss = 2.0848e-03\nepoch 154 loss = 2.0505e-03\nepoch 155 loss = 2.0175e-03\nepoch 156 loss = 1.9858e-03\nepoch 157 loss = 1.9551e-03\nepoch 158 loss = 1.9256e-03\nepoch 159 loss = 1.8972e-03\nepoch 160 loss = 1.8697e-03\nepoch 161 loss = 1.843e-03\nepoch 162 loss = 1.8171e-03\nepoch 163 loss = 1.7922e-03\nepoch 164 loss = 1.7683e-03\nepoch 165 loss = 1.7456e-03\nepoch 166 loss = 1.7248e-03\nepoch 167 loss = 1.7070e-03\nepoch 168 loss = 1.6946e-03\nepoch 169 loss = 1.6915e-03\nepoch 170 loss = 1.7078e-03\nepoch 171 loss = 1.7647e-03\nepoch 172 loss = 1.9071e-03\nepoch 173 loss = 2.208e-03\nepoch 174 loss = 2.7912e-03\nepoch 175 loss = 3.6748e-03\nepoch 176 loss = 4.616e-03\nepoch 177 loss = 4.3556e-03\nepoch 178 loss = 2.8233e-03\nepoch 179 loss = 1.5099e-03\nepoch 180 loss = 2.1269e-03\nepoch 181 loss = 2.9168e-03\nepoch 182 loss = 2.0391e-03\nepoch 183 loss = 1.4412e-03\nepoch 184 loss = 2.1351e-03\nepoch 185 loss = 2.0211e-03\nepoch 186 loss = 1.3786e-03\nepoch 187 loss = 1.7209e-03\nepoch 188 loss = 1.8231e-03\nepoch 189 loss = 1.3442e-03\nepoch 190 loss = 1.5272e-03\nepoch 191 loss = 1.6369e-03\nepoch 192 loss = 1.2928e-03\nepoch 193 loss = 1.4158e-03\nepoch 194 loss = 1.4924e-03\nepoch 195 loss = 1.2382e-03\nepoch 196 loss = 1.3385e-03\nepoch 197 loss = 1.3735e-03\nepoch 198 loss = 1.1885e-03\nepoch 199 loss = 1.2722e-03\nepoch 200 loss = 1.2784e-03\nepoch 201 loss = 1.1444e-03\nepoch 202 loss = 1.2077e-03\nepoch 203 loss = 1.1997e-03\nepoch 204 loss = 1.1032e-03\nepoch 205 loss = 1.1482e-03\nepoch 206 loss = 1.1349e-03\nepoch 207 loss = 1.0641e-03\nepoch 208 loss = 1.0941e-03\nepoch 209 loss = 1.0795e-03\nepoch 210 loss = 1.0261e-03\nepoch 211 loss = 1.0447e-03\nepoch 212 loss = 1.0312e-03\nepoch 213 loss = 9.8982e-04\nepoch 214 loss = 9.9935e-04\nepoch 215 loss = 9.8855e-04\nepoch 216 loss = 9.5525e-04\nepoch 217 loss = 9.5756e-04\nepoch 218 loss = 9.4972e-04\nepoch 219 loss = 9.2201e-04\nepoch 220 loss = 9.1904e-04\nepoch 221 loss = 9.1347e-04\nepoch 222 loss = 8.9042e-04\nepoch 223 loss = 8.8344e-04\nepoch 224 loss = 8.7947e-04\nepoch 225 loss = 8.6062e-04\nepoch 226 loss = 8.5022e-04\nepoch 227 loss = 8.4681e-04\nepoch 228 loss = 8.3214e-04\nepoch 229 loss = 8.1949e-04\nepoch 230 loss = 8.1524e-04\nepoch 231 loss = 8.0461e-04\nepoch 232 loss = 7.9129e-04\nepoch 233 loss = 7.8494e-04\nepoch 234 loss = 7.7747e-04\nepoch 235 loss = 7.6518e-04\nepoch 236 loss = 7.5672e-04\nepoch 237 loss = 7.5058e-04\nepoch 238 loss = 7.4059e-04\nepoch 239 loss = 7.307e-04\nepoch 240 loss = 7.2426e-04\nepoch 241 loss = 7.1672e-04\nepoch 242 loss = 7.0701e-04\nepoch 243 loss = 6.9923e-04\nepoch 244 loss = 6.9285e-04\nepoch 245 loss = 6.8475e-04\nepoch 246 loss = 6.7624e-04\nepoch 247 loss = 6.6944e-04\nepoch 248 loss = 6.628e-04\nepoch 249 loss = 6.5502e-04\nepoch 250 loss = 6.4755e-04\nepoch 251 loss = 6.4111e-04\nepoch 252 loss = 6.3453e-04\nepoch 253 loss = 6.2734e-04\nepoch 254 loss = 6.2056e-04\nepoch 255 loss = 6.1440e-04\nepoch 256 loss = 6.081e-04\nepoch 257 loss = 6.0144e-04\nepoch 258 loss = 5.9509e-04\nepoch 259 loss = 5.8919e-04\nepoch 260 loss = 5.8323e-04\nepoch 261 loss = 5.7708e-04\nepoch 262 loss = 5.7111e-04\nepoch 263 loss = 5.6548e-04\nepoch 264 loss = 5.5990e-04\nepoch 265 loss = 5.5421e-04\nepoch 266 loss = 5.4859e-04\nepoch 267 loss = 5.4321e-04\nepoch 268 loss = 5.3792e-04\nepoch 269 loss = 5.3259e-04\nepoch 270 loss = 5.2728e-04\nepoch 271 loss = 5.2210e-04\nepoch 272 loss = 5.1709e-04\nepoch 273 loss = 5.1212e-04\nepoch 274 loss = 5.0714e-04\nepoch 275 loss = 5.0221e-04\nepoch 276 loss = 4.9740e-04\nepoch 277 loss = 4.9268e-04\nepoch 278 loss = 4.8801e-04\nepoch 279 loss = 4.8337e-04\nepoch 280 loss = 4.7876e-04\nepoch 281 loss = 4.7426e-04\nepoch 282 loss = 4.6982e-04\nepoch 283 loss = 4.6544e-04\nepoch 284 loss = 4.611e-04\nepoch 285 loss = 4.568e-04\nepoch 286 loss = 4.5255e-04\nepoch 287 loss = 4.4837e-04\nepoch 288 loss = 4.4426e-04\nepoch 289 loss = 4.4017e-04\nepoch 290 loss = 4.3613e-04\nepoch 291 loss = 4.3213e-04\nepoch 292 loss = 4.2817e-04\nepoch 293 loss = 4.2427e-04\nepoch 294 loss = 4.2041e-04\nepoch 295 loss = 4.1660e-04\nepoch 296 loss = 4.1283e-04\nepoch 297 loss = 4.0911e-04\nepoch 298 loss = 4.0542e-04\nepoch 299 loss = 4.0177e-04\nepoch 300 loss = 3.9817e-04\nepoch 301 loss = 3.946e-04\nepoch 302 loss = 3.9107e-04\nepoch 303 loss = 3.8758e-04\nepoch 304 loss = 3.8413e-04\nepoch 305 loss = 3.8072e-04\nepoch 306 loss = 3.7735e-04\nepoch 307 loss = 3.7402e-04\nepoch 308 loss = 3.7073e-04\nepoch 309 loss = 3.6747e-04\nepoch 310 loss = 3.6426e-04\nepoch 311 loss = 3.6108e-04\nepoch 312 loss = 3.5796e-04\nepoch 313 loss = 3.5487e-04\nepoch 314 loss = 3.5181e-04\nepoch 315 loss = 3.488e-04\nepoch 316 loss = 3.4580e-04\nepoch 317 loss = 3.4286e-04\nepoch 318 loss = 3.3995e-04\nepoch 319 loss = 3.3709e-04\nepoch 320 loss = 3.3428e-04\nepoch 321 loss = 3.3153e-04\nepoch 322 loss = 3.2884e-04\nepoch 323 loss = 3.2626e-04\nepoch 324 loss = 3.2376e-04\nepoch 325 loss = 3.2142e-04\nepoch 326 loss = 3.1928e-04\nepoch 327 loss = 3.1745e-04\nepoch 328 loss = 3.1598e-04\nepoch 329 loss = 3.1505e-04\nepoch 330 loss = 3.1494e-04\nepoch 331 loss = 3.1606e-04\nepoch 332 loss = 3.1898e-04\nepoch 333 loss = 3.2443e-04\nepoch 334 loss = 3.3428e-04\nepoch 335 loss = 3.4932e-04\nepoch 336 loss = 3.7490e-04\nepoch 337 loss = 4.1170e-04\nepoch 338 loss = 4.6496e-04\nepoch 339 loss = 5.2426e-04\nepoch 340 loss = 6.1249e-04\nepoch 341 loss = 6.7686e-04\nepoch 342 loss = 7.4404e-04\nepoch 343 loss = 7.1539e-04\nepoch 344 loss = 6.375e-04\nepoch 345 loss = 4.7257e-04\nepoch 346 loss = 3.3921e-04\nepoch 347 loss = 3.1226e-04\nepoch 348 loss = 3.9777e-04\nepoch 349 loss = 5.1714e-04\nepoch 350 loss = 5.8684e-04\nepoch 351 loss = 6.1002e-04\nepoch 352 loss = 6.7329e-04\nepoch 353 loss = 8.5246e-04\nepoch 354 loss = 1.1508e-03\nepoch 355 loss = 1.3908e-03\nepoch 356 loss = 1.4989e-03\nepoch 357 loss = 1.2967e-03\nepoch 358 loss = 9.1952e-04\nepoch 359 loss = 5.0170e-04\nepoch 360 loss = 2.9316e-04\nepoch 361 loss = 3.8791e-04\nepoch 362 loss = 6.1391e-04\nepoch 363 loss = 6.9534e-04\nepoch 364 loss = 5.1522e-04\nepoch 365 loss = 2.8983e-04\nepoch 366 loss = 2.6579e-04\nepoch 367 loss = 4.1233e-04\nepoch 368 loss = 4.9169e-04\nepoch 369 loss = 3.9478e-04\nepoch 370 loss = 2.5822e-04\nepoch 371 loss = 2.4939e-04\nepoch 372 loss = 3.3748e-04\nepoch 373 loss = 3.7292e-04\nepoch 374 loss = 3.0937e-04\nepoch 375 loss = 2.3745e-04\nepoch 376 loss = 2.4138e-04\nepoch 377 loss = 2.8950e-04\nepoch 378 loss = 3.0171e-04\nepoch 379 loss = 2.6314e-04\nepoch 380 loss = 2.2614e-04\nepoch 381 loss = 2.2966e-04\nepoch 382 loss = 2.5367e-04\nepoch 383 loss = 2.5836e-04\nepoch 384 loss = 2.3762e-04\nepoch 385 loss = 2.1758e-04\nepoch 386 loss = 2.1725e-04\nepoch 387 loss = 2.2800e-04\nepoch 388 loss = 2.3122e-04\nepoch 389 loss = 2.2173e-04\nepoch 390 loss = 2.1003e-04\nepoch 391 loss = 2.0651e-04\nepoch 392 loss = 2.1007e-04\nepoch 393 loss = 2.1265e-04\nepoch 394 loss = 2.0957e-04\nepoch 395 loss = 2.0308e-04\nepoch 396 loss = 1.9823e-04\nepoch 397 loss = 1.9719e-04\nepoch 398 loss = 1.9826e-04\nepoch 399 loss = 1.9837e-04\nepoch 400 loss = 1.9584e-04\n```\n:::\n:::\n\n\n# Evaluate the model\n\n::: {#cc60df05 .cell execution_count=7}\n``` {.python .cell-code}\nROM.eval()\n\nF_train = F_train.cpu()\nF_val = F_val.cpu()\nROM.cpu()\ntorch.save(ROM, 'FullModel.pt') # to save a full coarse model\n```\n:::\n\n\n# Plots\n\n::: {#1259922a .cell execution_count=8}\n``` {.python .cell-code}\nloss_t_vect = [loss_t.cpu() for loss_t in loss_t_vect]\nloss_v_vect = [loss_v.cpu() for loss_v in loss_v_vect]\n\n\nplt.plot(loss_t_vect,label = 'training set')\nplt.plot(loss_v_vect,label = 'validation set')\nplt.legend(loc=\"upper right\")\nplt.show()\nplt.semilogy(loss_t_vect,label = 'training set')\nplt.semilogy(loss_v_vect,label = 'validation set')\nplt.legend(loc=\"upper right\")\nplt.xlabel('Epochs')\nplt.xlabel('Loss')\n# plt.savefig(f'Results/loss_training_'+Function+'.pdf', transparent=True)  \nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](Autoencoder_files/figure-html/cell-9-output-1.png){width=573 height=415}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Autoencoder_files/figure-html/cell-9-output-2.png){width=585 height=437}\n:::\n:::\n\n\n# Plot the comparison of the latent space and the natural parameter used to generate the data\n\n::: {#07d985b9 .cell execution_count=9}\n``` {.python .cell-code}\nAlpha_latent = ROM(F.t(),\"encode\")\nplt.plot(Alpha_vect.view(-1,1).cpu().data,Alpha_latent.view(-1,1).cpu().data)\nplt.xlabel(r'$\\alpha$')\nplt.ylabel(r'$\\hat{\\alpha}$')\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](Autoencoder_files/figure-html/cell-10-output-1.png){width=595 height=437}\n:::\n:::\n\n\n# Plot reconstructed image\n\n::: {#7d782cba .cell execution_count=10}\n``` {.python .cell-code}\nF_reconstructed = ROM(Alpha_latent.view(-1,1))\n# F_reconstructed = ROM(Alpha_vect.view(-1,1))\n\nplt.imshow(F_reconstructed.cpu().data,cmap='gray')\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](Autoencoder_files/figure-html/cell-11-output-1.png){width=568 height=77}\n:::\n:::\n\n\n# Plot errors\n\n## Error map\n\n::: {#54f9091e .cell execution_count=11}\n``` {.python .cell-code}\nplt.imshow(F_reconstructed.cpu().data-F.t(),cmap='gray')\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](Autoencoder_files/figure-html/cell-12-output-1.png){width=568 height=77}\n:::\n:::\n\n\n## Errors on sliced fields\n\nThe trained model and the reference are compared for two values\n* $\\alpha = 1/3$ &\n* $\\alpha = 2/3$.\n\n::: {#fef32bab .cell execution_count=12}\n``` {.python .cell-code}\nidx1 = int(np.floor(0.66*F.shape[1]))\nidx2 = int(np.floor(0.33*F.shape[1]))\n\nplt.plot(x_vect,F[:,idx1],'k',label='Full, alpha = 2/3')\nplt.plot(x_vect,F_reconstructed.t()[:,idx1].cpu().data,'--',label='Truncated, alpha = 2/3')\nplt.plot(x_vect,F[:,idx2],'k',label='Full, alpha = 1/3')\nplt.plot(x_vect,F_reconstructed.t()[:,idx2].cpu().data,'--',label='Truncated, alpha = 1/3')\nplt.legend(loc=\"upper left\")\nplt.title(f'2 slices of the field')\nplt.xlabel(r'$x$')\nplt.ylabel(r'$f(x,\\alpha)$')\n# plt.savefig(f'Results/Sliced_TruncatedField_{N}_'+Function+'.pdf', transparent=True)  \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Autoencoder_files/figure-html/cell-13-output-1.png){width=620 height=460}\n:::\n:::\n\n\n",
    "supporting": [
      "Autoencoder_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}